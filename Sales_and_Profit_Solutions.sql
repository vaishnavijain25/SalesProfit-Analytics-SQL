SELECT  * FROM Fact5
SELECT  * FROM Product5
SELECT  * FROM LOCATION5

--1. Display the number of states present in the LocationTable.
select  COUNT(distinct state) as Number_of_States from
LOCATION5 

--2. How many products are of regular type?
select * from Product5 where Type='Regular'

--3. How much spending has been done on marketing of product ID 1?
select ProductId, sum(Marketing) as Total_Marketing_Productid1
from Fact5 
where ProductId=1 
GROUP BY ProductID

--4. What is the minimum sales of a product?
select MIN(Sales) as min_sale from
Fact5

--5. Display the max Cost of Good Sold (COGS).
select max(COGS) as max_COGS from
Fact5

--6. Display the details of the product where product type is coffee.
select * from PRODUCT5 where Product_Type='Coffee'

--7. Display the details where total expenses are greater than 40.
select * from FACT5 where Total_expenses > 40

--8. What is the average sales in area code 719?
select AVG(Sales) as avg_sales_719 from 
Fact5 where Area_Code=719

--9. Find out the total profit generated by Colorado state.
select L.State, SUM(F.Profit) as total_profit_colorado
from 
Location5 as L 
join Fact5 as F on L.Area_Code=F.Area_Code
where state='Colorado'
GROUP BY L.State

--10. Display the average inventory for each product ID.
select ProductID, AVG(Inventory) as avg_inventory 
from
Fact5 
Group by ProductID

--11. Display state in a sequential order in a Location Table.
select * from Location5 
Order by State ASC

--12. Display the average budget of the Product where the average budget margin should be greater than 100.
select ProductID, AVG(Budget_Sales) as avg_budget 
from Fact5 
GROUP BY ProductID 
HAVING AVG(Budget_Margin)> 100 

--13. What is the total sales done on date 2010-01-01?
select date, Sum(Sales) as total_sales_2010_01_01
from Fact5
Where Date='2010-01-01'
GROUP BY Date 

--14. Display the average total expense of each product ID on an individual date.
select ProductID,Date,  AVG(Total_Expenses) as avg_expense 
from Fact5
GROUP BY ProductID, Date
ORDER BY ProductID

--15. Display the table with the following attributes such as date, productID, product_type, product, sales, profit, state, area_code.
select F.date, F.ProductID, P.Product_type, P.Product, F.Sales, F.Profit, L.State, F.Area_code
from
Fact5 as F 
join Location5 as L on L.Area_Code=F.Area_Code
Join Product5 as P on P.ProductId=F.ProductId

--16. Display the rank without any gap to show the sales wise rank.
select Sales, 
DENSE_RANK() OVER(ORDER BY Sales ASC) as RANK_Sales
from 
Fact5

--17. Find the state wise profit and sales.
Select L.State, SUM(F.Profit) as Profit, SUM(F.Sales)  as Sales
from 
Fact5 as F 
join Location5 as L on F.Area_Code=L.Area_Code
GROUP BY L.State
order by L.State

--18. Find the state wise profit and sales along with the product name.
Select P.Product, L.State, SUM(F.Profit) as Profit, SUM(F.Sales)  as Sales
from 
PRODUCT5 as P 
join FACT5 as F on F.ProductId=P.ProductId
join LOCATION5 as L on F.Area_Code=L.Area_Code
GROUP BY L.State, P.Product
order by L.State

--19. If there is an increase in sales of 5%, calculate the increasedsales.
select 
(Sales*0.05)+Sales as Increased_Sales
from Fact5

--20. Find the maximum profit along with the product ID and producttype.
select  P.ProductID, P.Product_Type , max(F.Profit) as max_profit
from Fact5 as F 
join PRODUCT5 as P
on F.ProductId=P.ProductId
GROUP BY P.ProductID, P.Product_Type 

--21. Create a stored procedure to fetch the result according to the product type from Product Table.

CREATE PROCEDURE usp_GetProductsByType
    @Product_Type VARCHAR(50)   -- Input parameter
AS
BEGIN
    SELECT ProductID, Product, Product_Type
    FROM PRODUCT5
    WHERE Product_Type = @Product_Type;
END;

EXEC usp_GetProductsByType @Product_Type = 'Coffee';


--22. Write a query by creating a condition in which if the total expenses is less than 60 then it is a profit or else loss.

SELECT 
    Total_Expenses,
    CASE 
        WHEN Total_Expenses < 60 THEN 'Profit'
        ELSE 'Loss'
    END AS ProfitOrLoss
FROM Fact5;

--23. Give the total weekly sales value with the date and product ID details. Useroll-up to pull the data in hierarchical order.

SELECT 
    DATEPART(week, Date) AS WeekNo,
    ProductID,
    SUM(Sales) AS TotalSales
FROM FACT5
GROUP BY 
    DATEPART(week, Date),
    ProductID
WITH ROLLUP;

--24. Apply union and intersection operator on the tables which consist of attribute area code

SELECT Area_Code FROM FACT5
UNION 
SELECT Area_Code FROM Location5;

SELECT Area_Code FROM FACT5
INTERSECT
SELECT Area_Code FROM Location5;


--25. Create a user-defined function for the product table to fetch a particular product type based upon the user’s preference.

CREATE FUNCTION  dbo.GetProductByPreference(@Product_Type VARCHAR(50))
RETURNS TABLE
AS
RETURN
(
    SELECT ProductID, Product, Product_Type
    FROM PRODUCT5
    WHERE Product_Type = @Product_Type
);

SELECT * FROM dbo.GetProductByPreference('coffee');

--26. Change the product type from coffee to tea where product ID is 1 and undo it.

BEGIN TRANSACTION;

UPDATE Product5
SET Product_Type = 'tea'
WHERE ProductID = 1;

SELECT * FROM Product5 WHERE ProductID = 1;

ROLLBACK;

SELECT * FROM Product5 WHERE ProductID = 1;

select * from Product5

--27. Display the date, product ID and sales where total expenses are between 100 to 200.
select date, productid, sales 
from fact5 
where Total_Expenses between 100 and 200

--28. Delete the records in the Product Table for regular type.
Delete from 
Product5 
where Type='Regular'

--29. Display the ASCII value of the fifth character from the columnProduct.
select ASCII(SUBSTRING(Product, 5,1)) as fifth_character_ascii
from Product5

SELECT  * FROM Fact5
SELECT  * FROM Product5
SELECT  * FROM LOCATION5
------------------------------------------------------------------------------------------------------------------------------------------

